/**
* This file is auto-generated by nestjs-protobuf-compiler
*/

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';
import { isSet, isObject, struct } from '../common';
{{{importTs this}}}

export namespace {{name}} {
    {{> selector }}
}

{{#*inline "selector"}}
{{#each nested}}
{{#if fields}}
{{> type }}
{{else if methods}}
{{> service }}
{{else if values}}
{{> enum }}
{{else}}
{{> namespace }}
{{/if}}
{{/each}}
{{/inline}}


{{#*inline "namespace"}}
export namespace {{@key}} {
    {{> selector }}
}
{{/inline}}


{{#*inline "service"}}
export interface {{@key}} {
{{#each methods}}
    {{#if this.requestStream}}
    {{uncapitalize @key}}(
        data: Observable<{{this.requestType}}>,
        metadata?: Metadata,
        ...rest: any[]
    ): Observable<{{this.responseType}}>;
    {{else}}
    {{uncapitalize @key}}(
        data: {{this.requestType}},
        metadata?: Metadata,
        ...rest: any[]
    ): Observable<{{this.responseType}}>;
    {{/if}}
{{/each}}
}
{{> selector }}
{{/inline}}


{{#*inline "type"}}
export interface {{@key}} {
{{#each fields}}
    {{@key}}?: {{type this}};
{{/each}}
}
export const {{@key}} = {
    fromJSON(object: any): {{@key}} {
        return {
            {{#each fields}}
            {{{fromJSON this}}}
            {{/each}}
        }
    },
    toJSON(message: {{@key}}) {
        const obj: any = {};
        {{#each fields}}
        {{{toJSON this}}}
        {{/each}}
        return obj;
    }
}
{{/inline}}


{{#*inline "enum"}}
{{var "comments" comments ~}}
export enum {{@key}} {
{{#each values}}
{{#if (enumComment @key)}}
    {{enumComment @key}}
{{/if}}
    {{@key}} = {{this}},
{{/each}}
}
{{/inline}}
