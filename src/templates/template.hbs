/**
* This file is auto-generated by nestjs-protobuf-compiler
*/

/* eslint-disable */

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
{{{importTs this}}}

export namespace {{name}} {
  export const PACKAGE_NAME = '{{name}}';

  {{> selector }}
}

{{#*inline "selector"}}
{{#each nested}}
{{#if methods}}
{{> services}}

{{else if values}}
{{> enums}}

{{else if fields}}
{{> messages}}
{{> convertors}}

{{else}}
{{> namespace }}
{{/if}}
{{/each}}
{{/inline}}


{{#*inline "services"}}
export interface {{@key}} {
  {{#each methods}}
  {{#if this.requestStream}}
  {{uncapitalize @key}}(
    data: Observable<{{this.requestType}}>,
    metadata?: Metadata,
    ...rest: any[]
  ): Observable<{{this.responseType}}>;
  {{else}}
  {{uncapitalize @key}}(
    data: {{this.requestType}},
    metadata?: Metadata,
    ...rest: any[]
  ): Promise<{{this.responseType}}> | Observable<{{this.responseType}}> | {{this.responseType}};
  {{/if}}
  {{/each}}
}
export interface {{@key}}Client {
  {{#each methods}}
  {{uncapitalize @key}}(
    data: {{this.requestType}},
    metadata?: Metadata,
    ...rest: any[]
  ): Observable<{{this.responseType}}>;
  {{/each}}
}
export function {{@key}}Methods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      {{#each methods}}
      {{#if this.responseStream}}
      {{else}}
      '{{uncapitalize @key}}',
      {{/if}}
      {{/each}}
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod('{{@key}}', method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [
      {{#each methods}}
      {{#if this.responseStream}}
      '{{uncapitalize @key}}',
      {{/if}}
      {{/each}}
    ];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod('{{@key}}', method)(constructor.prototype[method], method, descriptor);
    }
  };
}
{{/inline}}

{{#*inline "enums"}}
export enum {{@key}} {
  {{#each values}}
  {{@key}} = {{this}},
  {{/each}}
}
{{/inline}}

{{#*inline "messages"}}
export interface {{@key}} {
  {{#each fields}}
  {{@key}}?: {{type this}};
  {{/each}}
}
{{/inline}}

{{#*inline "convertors"}}
export const {{@key}} = {
  {{{convertor this}}}
}
{{/inline}}

{{#*inline "namespace"}}
export namespace {{@key}} {
  {{> selector }}
}
{{/inline}}